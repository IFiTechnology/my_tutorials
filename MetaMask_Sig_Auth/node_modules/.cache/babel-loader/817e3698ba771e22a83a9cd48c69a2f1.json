{"ast":null,"code":"var _jsxFileName = \"/Users/michaelcouch/Documents/Ethereum/my_tutorials/MetaMask_Sig_Auth/src/WalletCard.js\",\n    _s = $RefreshSig$();\n\n// https://docs.metamask.io/guide/ethereum-provider.html#using-the-provider\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './WalletCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WalletCard = () => {\n  _s();\n\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [userBalance, setUserBalance] = useState(null);\n  const [connButtonText, setConnButtonText] = useState('Connect Wallet');\n  const [ChainID, setChainID] = useState(null); // whenever we connect to the wallet, run this code.\n\n  useEffect(() => {\n    if (window.ethereum.isConnected()) {\n      // get ChainID\n      setChainID(getChainID());\n    }\n  }, [connButtonText]);\n\n  const getChainID = () => {\n    window.ethereum.request({\n      method: 'eth_chainId'\n    }).then(result => {\n      return result;\n    });\n  };\n\n  const LogInHandler = () => {\n    if (ChainID === '0x3') {\n      console.log('proceed to login');\n    } else {\n      setErrorMessage('Please change chain to Ropsten to login');\n      console.log(ChainID);\n    }\n  };\n\n  const connectWalletHandler = () => {\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      console.log('MetaMask Here!');\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        accountChangedHandler(result[0]);\n        setConnButtonText('Wallet Connected');\n        getAccountBalance(result[0]);\n      }).catch(error => {\n        setErrorMessage(error.message);\n      });\n    } else {\n      console.log('Need to install MetaMask');\n      setErrorMessage('Please install MetaMask browser extension to interact');\n    }\n  }; // update account, will cause component re-render\n\n\n  const accountChangedHandler = newAccount => {\n    setDefaultAccount(newAccount);\n    getAccountBalance(newAccount.toString());\n  };\n\n  const getAccountBalance = account => {\n    window.ethereum.request({\n      method: 'eth_getBalance',\n      params: [account, 'latest']\n    }).then(balance => {\n      setUserBalance(ethers.utils.formatEther(balance));\n    }).catch(error => {\n      setErrorMessage(error.message);\n    });\n  };\n\n  const chainChangedHandler = () => {\n    // reload the page to avoid any errors with chain change mid use of application\n    window.location.reload();\n  }; // listen for account changes\n\n\n  window.ethereum.on('accountsChanged', accountChangedHandler);\n  window.ethereum.on('chainChanged', chainChangedHandler);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"walletCard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\" \", \"Connection to MetaMask using window.ethereum methods\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      children: connButtonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accountDisplay\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Address: \", defaultAccount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"balanceDisplay\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Balance: \", userBalance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 4\n    }, this), errorMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: LogInHandler,\n      children: \" Log In \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 3\n  }, this);\n};\n\n_s(WalletCard, \"nZIQkZ9ri/bDVoxRYjh/82cPXdo=\");\n\n_c = WalletCard;\nexport default WalletCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletCard\");","map":{"version":3,"sources":["/Users/michaelcouch/Documents/Ethereum/my_tutorials/MetaMask_Sig_Auth/src/WalletCard.js"],"names":["React","useState","useEffect","ethers","WalletCard","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","userBalance","setUserBalance","connButtonText","setConnButtonText","ChainID","setChainID","window","ethereum","isConnected","getChainID","request","method","then","result","LogInHandler","console","log","connectWalletHandler","isMetaMask","accountChangedHandler","getAccountBalance","catch","error","message","newAccount","toString","account","params","balance","utils","formatEther","chainChangedHandler","location","reload","on"],"mappings":"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","sourcesContent":["// https://docs.metamask.io/guide/ethereum-provider.html#using-the-provider\n\nimport React, {useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport './WalletCard.css'\n\nconst WalletCard = () => {\n\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [userBalance, setUserBalance] = useState(null);\n\tconst [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\tconst [ChainID, setChainID] = useState(null);\t\n\n\t// whenever we connect to the wallet, run this code.\n\tuseEffect(()=>{\n\t\tif (window.ethereum.isConnected()){\n\t\t\t// get ChainID\n\t\t\tsetChainID(getChainID());\n\t\t}\n\t}, [connButtonText])\n\n\tconst getChainID = () => {\n\t\t\twindow.ethereum.request({method: 'eth_chainId'})\n\t\t\t.then(result => {\n\t\t\t\treturn result;\n\t\t\t});\n\t}\n\n\tconst LogInHandler = () => {\n\t\tif (ChainID === '0x3') {\n\t\t\tconsole.log('proceed to login');\n\t\t} else {\n\t\t\tsetErrorMessage('Please change chain to Ropsten to login');\n\t\t\tconsole.log(ChainID);\n\t\t}\n\t}\n\n\tconst connectWalletHandler = () => {\n\t\tif (window.ethereum && window.ethereum.isMetaMask) {\n\t\t\tconsole.log('MetaMask Here!');\n\n\t\t\twindow.ethereum.request({ method: 'eth_requestAccounts'})\n\t\t\t.then(result => {\n\t\t\t\taccountChangedHandler(result[0]);\n\t\t\t\tsetConnButtonText('Wallet Connected');\n\t\t\t\tgetAccountBalance(result[0]);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(error.message);\n\t\t\t\n\t\t\t});\n\n\t\t} else {\n\t\t\tconsole.log('Need to install MetaMask');\n\t\t\tsetErrorMessage('Please install MetaMask browser extension to interact');\n\t\t}\n\t}\n\n\t// update account, will cause component re-render\n\tconst accountChangedHandler = (newAccount) => {\n\t\tsetDefaultAccount(newAccount);\n\t\tgetAccountBalance(newAccount.toString());\n\t}\n\n\tconst getAccountBalance = (account) => {\n\t\twindow.ethereum.request({method: 'eth_getBalance', params: [account, 'latest']})\n\t\t.then(balance => {\n\t\t\tsetUserBalance(ethers.utils.formatEther(balance));\n\t\t})\n\t\t.catch(error => {\n\t\t\tsetErrorMessage(error.message);\n\t\t});\n\t};\n\n\tconst chainChangedHandler = () => {\n\t\t// reload the page to avoid any errors with chain change mid use of application\n\t\twindow.location.reload();\n\t}\n\n\n\t// listen for account changes\n\twindow.ethereum.on('accountsChanged', accountChangedHandler);\n\n\twindow.ethereum.on('chainChanged', chainChangedHandler);\n\t\n\treturn (\n\t\t<div className='walletCard'>\n\t\t<h4> {\"Connection to MetaMask using window.ethereum methods\"} </h4>\n\t\t\t<button onClick={connectWalletHandler}>{connButtonText}</button>\n\t\t\t<div className='accountDisplay'>\n\t\t\t\t<h3>Address: {defaultAccount}</h3>\n\t\t\t</div>\n\t\t\t<div className='balanceDisplay'>\n\t\t\t\t<h3>Balance: {userBalance}</h3>\n\t\t\t</div>\n\t\t\t{errorMessage}\n\t\t\t<button onClick={LogInHandler}> Log In </button>\n\t\t</div>\n\t);\n}\n\nexport default WalletCard;"]},"metadata":{},"sourceType":"module"}